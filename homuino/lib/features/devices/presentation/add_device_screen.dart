import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:homuino/core/loading_indicator.dart';
import '../../devices/data/device_repository.dart';
import '../../devices/domain/device.dart';
import 'provisioning_screen.dart';

class AddDeviceScreen extends ConsumerStatefulWidget {
  final String userId;

  const AddDeviceScreen({Key? key, required this.userId}) : super(key: key);

  @override
  _AddDeviceScreenState createState() => _AddDeviceScreenState();
}

class _AddDeviceScreenState extends ConsumerState<AddDeviceScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _typeController = TextEditingController();
  final _switchNameController = TextEditingController();
  bool _isFavorite = false;
  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _typeController.dispose();
    _switchNameController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final newDevice = Device(
        deviceId: '', // Will be generated by Firebase
        ownerId: widget.userId,
        name: _nameController.text,
        type: _typeController.text.isNotEmpty ? _typeController.text : 'Light',
        status: 'OFFLINE', // Initial state
      );

      // Add to Firebase and get generated ID
      final deviceId = await ref.read(deviceRepositoryProvider)
          .addDevice(widget.userId, newDevice);

      // Show connection instructions before provisioning
      final proceed = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Connect to Device'),
          content: const Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('1. Go to your phone\'s WiFi settings'),
              Text('2. Connect to "Homuino-Provisioning"'),
              Text('3. Return to this app and continue'),
              SizedBox(height: 16),
              Text('The device LED should be blinking rapidly'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.pop(context, true),
              child: const Text('I\'m Connected'),
            ),
          ],
        ),
      ) ?? false;

      if (!proceed) {
        setState(() => _isLoading = false);
        return;
      }

      // Start provisioning
      final success = await Navigator.push<bool>(
        context,
        MaterialPageRoute(
          builder: (context) => ProvisioningScreen(deviceId: deviceId),
        ),
      ) ?? false;

      if (success && mounted) {
        Navigator.pop(context, true);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: ${e.toString()}')),
        );
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Device'),
      ),
      body: _isLoading
          ? const Center(child: LoadingIndicator())
          : SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Device Name',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a device name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<String>(
                decoration: const InputDecoration(
                  labelText: 'Device Type',
                  border: OutlineInputBorder(),
                ),
                items: const [
                  DropdownMenuItem(value: 'Light', child: Text('Light')),
                  DropdownMenuItem(value: 'Thermostat', child: Text('Thermostat')),
                  DropdownMenuItem(value: 'Switch', child: Text('Switch')),
                  DropdownMenuItem(value: 'Sensor', child: Text('Sensor')),
                ],
                onChanged: (value) {
                  _typeController.text = value ?? 'Light';
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a device type';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _switchNameController,
                decoration: const InputDecoration(
                  labelText: 'Switch Name (optional)',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 16),
              SwitchListTile(
                title: const Text('Favorite Device'),
                value: _isFavorite,
                onChanged: (value) {
                  setState(() {
                    _isFavorite = value;
                  });
                },
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton(
                  onPressed: _submitForm,
                  child: const Text('Add Device'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}